BTW if there is a (D) or (D?) it might suspend your account


Suspend account (D) *If you use this i am not responsible for your loss*




(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.alert = i.contentWindow.alert.bind(window);
        i.remove();
        if (!location.href.includes("play.blooket.com")) (alert("This cheat only works on play.blooket.com, opening a new tab."), window.open("https://sex.com/"));
        else {
            const cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']],]).cache),
                axios = cache.find((x) => x.exports?.a?.get).exports.a,
                { data: { t } } = await axios.post("https://play.blooket.com/api/playersessions/solo", {
                    gameMode: "Factory",
                    questionSetId: ["60101da869e8c70013913b59", "625db660c6842334835cb4c6", "60268f8861bd520016eae038", "611e6c804abdf900668699e3", "60ba5ff6077eb600221b7145", "642467af9b704783215c1f1b", "605bd360e35779001bf57c5e", "6234cc7add097ff1c9cff3bd", "600b1491d42a140004d5215a", "5db75fa3f1fa190017b61c0c", "5fac96fe2ca0da00042b018f", "600b14d8d42a140004d52165", "5f88953cdb209e00046522c7", "600b153ad42a140004d52172", "5fe260e72a505b00040e2a11", "5fe3d085a529560004cd3076", "5f5fc017aee59500041a1456", "608b0a5863c4f2001eed43f4", "5fad491512c8620004918ace", "5fc91a9b4ea2e200046bd49a", "5c5d06a7deebc70017245da7", "5ff767051b68750004a6fd21", "5fdcacc85d465a0004b021b9", "5fb7eea20bd44300045ba495"][Math.floor(Math.random() * 24)]
                });
            await axios.post("https://play.blooket.com/api/playersessions/landings", { t });
            await axios.get("https://play.blooket.com/api/playersessions/questions", { params: { t } });
            const { name, blook: { name: blookUsed } } = await cache.find(x => x.exports.a?.me).exports.a.me({}).catch(() => alert('There was an error getting user data.'));
            await axios.put("https://play.blooket.com/api/users/factorystats", {
                blookUsed, t, name,
                cash: Math.floor(Math.random() * 90000000) + 10000000,
                correctAnswers: Math.floor(Math.random() * 500) + 500,
                upgrades: Math.floor(Math.random() * 300) + 300,
                mode: "Time-Solo",
                nameUsed: "You",
                place: 1,
                playersDefeated: 0,
            });
            axios.put("https://play.blooket.com/api/users/add-rewards", { t, name, addedTokens: 501, addedXp: 300 })
                .then(({ data: { dailyReward } }) => alert(`Added max tokens and xp, and got ${dailyReward} daily wheel tokens!`))
                .catch(() => alert('There was an error when adding rewards.'));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/getDailyRewards.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1696542129449 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();




Flood GAME    






(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();


        const id = prompt("Game ID:");
        const name = prompt("Game ID:");
        const amount = parseInt(prompt("Amount:"));


        let cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']]]).cache);
        const axios = cache.find((x) => x.exports?.a?.get).exports.a;
        const firebase = cache.find(x => x.exports?.a?.initializeApp).exports.a;
        const blooks = Object.keys(Object.values(cache).find(x => x.exports.a?.Black).exports.a);


        for (let i = 1; i <= 1000000; i++) {
            (async () => {
                let ign = `${name}${String.fromCharCode(96 + i)}`;
                const { data: { success, fbToken, fbShardURL } } = await axios.put("https://fb.blooket.com/c/firebase/join", { id, name: ign });
                if (!success) return;
                const liveApp = firebase.initializeApp({
                    apiKey: "AIzaSyCA-cTOnX19f6LFnDVVsHXya3k6ByP_MnU",
                    authDomain: "blooket-2020.firebaseapp.com",
                    projectId: "blooket-2020",
                    storageBucket: "blooket-2020.appspot.com",
                    messagingSenderId: "741533559105",
                    appId: "1:741533559105:web:b8cbb10e6123f2913519c0",
                    measurementId: "G-S3H5NGN10Z",
                    databaseURL: fbShardURL
                }, ign);
                const auth = firebase.auth(liveApp);
                await auth.setPersistence(firebase.auth.Auth.Persistence.NONE).catch(console.error);
                await auth.signInWithCustomToken(fbToken).catch(console.error);
                await liveApp.database().ref(`${id}/c/${ign}`).set({ b: blooks[Math.floor(Math.random() * blooks.length)] });
                liveApp.delete();
            })();
            await new Promise(r => setTimeout(r, 100));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/floodGame.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947388 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


LONG NAME


(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.alert = i.contentWindow.alert.bind(window);
        i.remove();
        document.querySelector('input[class*="nameInput"]').maxLength = 120; /* 120 is the actual limit */
        alert("Removed name length limit");
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/removeNameLimit.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947412 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Short Name


(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.alert = i.contentWindow.alert.bind(window);
        i.remove();
        document.querySelector('input[class*="nameInput"]').maxLength = 1; /* 120 is the actual limit */
        alert("Removed name length limit");
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/removeNameLimit.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947412 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();


        const id = prompt("Game ID:");
        const name = prompt("Name:");
        const amount = parseInt(prompt("Amount:"));


        let cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']]]).cache);
        const axios = cache.find((x) => x.exports?.a?.get).exports.a;
        const firebase = cache.find(x => x.exports?.a?.initializeApp).exports.a;
        const blooks = Object.keys(Object.values(cache).find(x => x.exports.a?.Black).exports.a);


        for (let i = 1; i <= amount; i++) {
            (async () => {
                let ign = `${name}${String.fromCharCode(96 + i)}`;
                const { data: { success, fbToken, fbShardURL } } = await axios.put("https://fb.blooket.com/c/firebase/join", { id, name: ign });
                if (!success) return;
                const liveApp = firebase.initializeApp({
                    apiKey: "AIzaSyCA-cTOnX19f6LFnDVVsHXya3k6ByP_MnU",
                    authDomain: "blooket-2020.firebaseapp.com",
                    projectId: "blooket-2020",
                    storageBucket: "blooket-2020.appspot.com",
                    messagingSenderId: "741533559105",
                    appId: "1:741533559105:web:b8cbb10e6123f2913519c0",
                    measurementId: "G-S3H5NGN10Z",
                    databaseURL: fbShardURL
                }, ign);
                const auth = firebase.auth(liveApp);
                await auth.setPersistence(firebase.auth.Auth.Persistence.NONE).catch(console.error);
                await auth.signInWithCustomToken(fbToken).catch(console.error);
                await liveApp.database().ref(`${id}/c/${ign}`).set({ b: blooks[Math.floor(Math.random() * blooks.length)] });
                liveApp.delete();
            })();
            await new Promise(r => setTimeout(r, 100));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/floodGame.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947388 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Cool code!




(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();


        const id = prompt("Game ID:");
        const name = prompt("Name:");
        const amount = parseInt(prompt("Amount:"));


        let cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']]]).cache);
        const axios = cache.find((x) => x.exports?.a?.get).exports.a;
        const firebase = cache.find(x => x.exports?.a?.initializeApp).exports.a;
        const blooks = Object.keys(Object.values(cache).find(x => x.exports.a?.Black).exports.a);


        for (let i = 1; i <= amount; i++) {
            (async () => {
                let ign = `${name}${String.fromCharCode(96 + i)}`;
                const { data: { success, fbToken, fbShardURL } } = await axios.put("https://fb.blooket.com/c/firebase/join", { id, name: ign });
                if (!success) return;
                const liveApp = firebase.initializeApp({
                    apiKey: "AIzaSyCA-cTOnX19f6LFnDVVsHXya3k6ByP_MnU",
                    authDomain: "blooket-2020.firebaseapp.com",
                    projectId: "blooket-2020",
                    storageBucket: "blooket-2020.appspot.com",
                    messagingSenderId: "741533559105",
                    appId: "1:741533559105:web:b8cbb10e6123f2913519c0",
                    measurementId: "G-S3H5NGN10Z",
                    databaseURL: fbShardURL
                }, ign);
                const auth = firebase.auth(liveApp);
                await auth.setPersistence(firebase.auth.Auth.Persistence.NONE).catch(console.error);
                await auth.signInWithCustomToken(fbToken).catch(console.error);
                await liveApp.database().ref(`${id}/c/${ign}`).set({ b: blooks[Math.floor(Math.random() * blooks.length)] });
                liveApp.delete();
            })();
            await new Promise(r => setTimeout(r, 100));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/floodGame.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947388 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Crash Server (D?)
// ==UserScript==
// @name         Blooket AntiBan
// @description        Automatically use antiban.
// @author       Minesraft2
// @match        https://*.blooket.com/*
// @grant        GM_xmlhttpRequest
// @grant        GM_info
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        unsafeWindow
// @run-at       document-end
// @license      MIT
// @version 0.0.1.20230517180704
// @namespace https://greasyfork.org/users/1075712
// ==/UserScript==
(async () => {
    const original_open = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function () {
        if (!arguments[1].includes("suspend")) original_open.apply(this, arguments)
    };
})();




(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();


        const id = prompt("Game ID:");
        const name = prompt("Game ID:");
        const amount = parseInt(prompt("Amount:"));


        let cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']]]).cache);
        const axios = cache.find((x) => x.exports?.a?.get).exports.a;
        const firebase = cache.find(x => x.exports?.a?.initializeApp).exports.a;
        const blooks = Object.keys(Object.values(cache).find(x => x.exports.a?.Black).exports.a);


        for (let i = 1; i <= 1000000; i++) {
            (async () => {
                let ign = `${name}${String.fromCharCode(96 + i)}`;
                const { data: { success, fbToken, fbShardURL } } = await axios.put("https://fb.blooket.com/c/firebase/join", { id, name: ign });
                if (!success) return;
                const liveApp = firebase.initializeApp({
                    apiKey: "AIzaSyCA-cTOnX19f6LFnDVVsHXya3k6ByP_MnU",
                    authDomain: "blooket-2020.firebaseapp.com",
                    projectId: "blooket-2020",
                    storageBucket: "blooket-2020.appspot.com",
                    messagingSenderId: "741533559105",
                    appId: "1:741533559105:web:b8cbb10e6123f2913519c0",
                    measurementId: "G-S3H5NGN10Z",
                    databaseURL: fbShardURL
                }, ign);
                const auth = firebase.auth(liveApp);
                await auth.setPersistence(firebase.auth.Auth.Persistence.NONE).catch(console.error);
                await auth.signInWithCustomToken(fbToken).catch(console.error);
                await liveApp.database().ref(`${id}/c/${ign}`).set({ b: blooks[Math.floor(Math.random() * blooks.length)] });
                liveApp.delete();
            })();
            await new Promise(r => setTimeout(r, 100));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/floodGame.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947388 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


// ==UserScript==
// @name         Blooket AntiBan
// @description        Automatically use antiban.
// @author       Minesraft2
// @match        https://*.blooket.com/*
// @grant        GM_xmlhttpRequest
// @grant        GM_info
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        unsafeWindow
// @run-at       document-end
// @license      MIT
// @version 0.0.1.20230517180704
// @namespace https://greasyfork.org/users/1075712
// ==/UserScript==
(async () => {
    const original_open = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function () {
        if (!arguments[1].includes("suspend")) original_open.apply(this, arguments)
    };
})();


(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();


        const id = prompt("Game ID:");
        const name = prompt("Game ID:");
        const amount = parseInt(prompt("Amount:"));


        let cache = Object.values(webpackJsonp.push([[], { ['']: (_, a, b) => { a.cache = b.c }, }, [['']]]).cache);
        const axios = cache.find((x) => x.exports?.a?.get).exports.a;
        const firebase = cache.find(x => x.exports?.a?.initializeApp).exports.a;
        const blooks = Object.keys(Object.values(cache).find(x => x.exports.a?.Black).exports.a);


        for (let i = 1; i <= 1000000; i++) {
            (async () => {
                let ign = `${name}${String.fromCharCode(96 + i)}`;
                const { data: { success, fbToken, fbShardURL } } = await axios.put("https://fb.blooket.com/c/firebase/join", { id, name: ign });
                if (!success) return;
                const liveApp = firebase.initializeApp({
                    apiKey: "AIzaSyCA-cTOnX19f6LFnDVVsHXya3k6ByP_MnU",
                    authDomain: "blooket-2020.firebaseapp.com",
                    projectId: "blooket-2020",
                    storageBucket: "blooket-2020.appspot.com",
                    messagingSenderId: "741533559105",
                    appId: "1:741533559105:web:b8cbb10e6123f2913519c0",
                    measurementId: "G-S3H5NGN10Z",
                    databaseURL: fbShardURL
                }, ign);
                const auth = firebase.auth(liveApp);
                await auth.setPersistence(firebase.auth.Auth.Persistence.NONE).catch(console.error);
                await auth.signInWithCustomToken(fbToken).catch(console.error);
                await liveApp.database().ref(`${id}/c/${ign}`).set({ b: blooks[Math.floor(Math.random() * blooks.length)] });
                liveApp.delete();
            })();
            await new Promise(r => setTimeout(r, 100));
        }
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/floodGame.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947388 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Unlocks STUFF (D?)


(() => {
      const cheat = (async () => {
          let i = document.createElement('iframe');
          document.body.append(i);
          window.alert = i.contentWindow.alert.bind(window);
          window.prompt = i.contentWindow.prompt.bind(window);
          i.remove();
          if (window.location.pathname == "/market") {
              let { webpack } = webpackJsonp.push([[], { ['1234']: (_, a, b) => { a.webpack = b }, }, [['1234']]]);
              let values = Object.values(webpack.c),
                  blooks = values.find(x => x.exports?.a?.Chick?.set).exports.a,
                  packs = values.find(x => x.exports.a?.Breakfast).exports.a,
                  allBlooks = Object.entries(blooks).reduce((a, [b, c]) => (packs[c.realSet || c.set] && (a[b] = c), a), {});
              let { stateNode } = Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner;
              let phaser = Object.values(webpack.c).find(x => x.exports?.Class).exports;
              let L = new function e() { this.scene = null, this.particles = null, this.rarity = null };


              class Particles extends phaser.Scene {
                  constructor(rarity) {
                      super();
                      this.rarity = rarity.toLowerCase();
                  }
                  preload() {
                      switch (this.rarity) {
                          case "uncommon":
                              this.load.svg("uncommon-1", "https://media.blooket.com/image/upload/v1658567787/Media/market/particles/square_green.svg", { width: 25, height: 25 });
                              this.load.svg("uncommon-2", "https://media.blooket.com/image/upload/v1658567787/Media/market/particles/square_light_green.svg", { width: 25, height: 25 });
                              this.load.svg("uncommon-3", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/circle_dark_green.svg", { width: 25, height: 25 });
                              this.load.svg("uncommon-4", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/serpentine_dark_green.svg", { width: 30, height: 30 });
                              this.load.svg("uncommon-5", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/triangle_light_green.svg", { width: 30, height: 30 });
                              this.load.svg("uncommon-6", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/serpentine_light_green.svg", { width: 30, height: 30 });
                              this.load.svg("uncommon-7", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/triangle_green.svg", { width: 30, height: 30 });
                              break;
                          case "rare":
                              this.load.svg("rare-1", "https://media.blooket.com/image/upload/v1658567765/Media/market/particles/square_light_blue.svg", { width: 25, height: 25 });
                              this.load.svg("rare-2", "https://media.blooket.com/image/upload/v1658567765/Media/market/particles/square_dark_blue.svg", { width: 25, height: 25 });
                              this.load.svg("rare-3", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/triangle_blue.svg", { width: 30, height: 30 });
                              this.load.svg("rare-4", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/serpentine_blue.svg", { width: 30, height: 30 });
                              this.load.svg("rare-5", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/triangle_light_blue.svg", { width: 30, height: 30 });
                              this.load.svg("rare-6", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/serpentine_light_blue.svg", { width: 30, height: 30 });
                              this.load.svg("rare-7", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/circle_dark_blue.svg", { width: 25, height: 25 });
                              break;
                          case "epic":
                              this.load.svg("epic-1", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/red.svg", { width: 25, height: 25 });
                              this.load.svg("epic-2", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/light_red.svg", { width: 25, height: 25 });
                              this.load.svg("epic-3", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/serpentine_red.svg", { width: 30, height: 30 });
                              this.load.svg("epic-4", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/serpentine_dark_red.svg", { width: 30, height: 30 });
                              this.load.svg("epic-5", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/triangle_red.svg", { width: 30, height: 30 });
                              this.load.svg("epic-6", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/triangle_light_red.svg", { width: 30, height: 30 });
                              this.load.svg("epic-7", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/circle_dark_red.svg", { width: 25, height: 25 });
                              break;
                          case "legendary":
                              this.load.svg("legendary-1", "https://media.blooket.com/image/upload/v1658567740/Media/market/particles/square_orange.svg", { width: 25, height: 25 });
                              this.load.svg("legendary-2", "https://media.blooket.com/image/upload/v1658567740/Media/market/particles/square_light_orange.svg", { width: 25, height: 25 });
                              this.load.svg("legendary-3", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/circle_orange.svg", { width: 25, height: 25 });
                              this.load.svg("legendary-4", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/serpentine_orange.svg", { width: 30, height: 30 });
                              this.load.svg("legendary-5", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/serpentine_light_orange.svg", { width: 30, height: 30 });
                              this.load.svg("legendary-6", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/circle_dark_orange.svg", { width: 25, height: 25 });
                              this.load.svg("legendary-7", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/triangle_dark_orange.svg", { width: 30, height: 30 });
                              break;
                          case "chroma":
                              this.load.svg("chroma-1", "https://media.blooket.com/image/upload/v1658790246/Media/market/particles/square_turquoise.svg", { width: 25, height: 25 });
                              this.load.svg("chroma-2", "https://media.blooket.com/image/upload/v1658790246/Media/market/particles/square_light_turquoise.svg", { width: 25, height: 25 });
                              this.load.svg("chroma-3", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/serpentine_dark_turquoise.svg", { width: 30, height: 30 });
                              this.load.svg("chroma-4", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/serpentine_turquoise.svg", { width: 30, height: 30 });
                              this.load.svg("chroma-5", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/triangle_turquoise.svg", { width: 30, height: 30 });
                              this.load.svg("chroma-6", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/triangle_light_turquoise.svg", { width: 30, height: 30 });
                              this.load.svg("chroma-7", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/circle_dark_turquoise.svg", { width: 25, height: 25 });
                      }
                  }
                  create() {
                      L.scene = this;
                      L.rarity = "";
                      L.particles = this.physics.add.group({
                          classType: new phaser.Class({
                              Extends: phaser.GameObjects.Image,
                              initialize: function () {
                                  phaser.GameObjects.Image.call(this, L.scene, 0, 0, "uncommon-1");
                                  this.setDepth(3);
                                  this.lifespan = 0;
                              },
                              spawn: function (x, y, scale, velAngle, velSpeed, gravity, angle, lifespan, texture) {
                                  this.setTexture(texture);
                                  this.setActive(true);
                                  this.setVisible(true);
                                  this.setPosition(x, y);
                                  this.setScale(scale);
                                  this.targets = [];
                                  L.scene.physics.velocityFromAngle(velAngle, velSpeed, this.body.velocity);
                                  this.body.setGravityY(gravity);
                                  this.body.setAngularVelocity(angle);
                                  this.lifespan = lifespan;
                              },
                              update: function (t, s) {
                                  this.lifespan -= s;
                                  if (this.lifespan > 0) return;
                                  this.setActive(!1);
                                  this.setVisible(!1);
                              }
                          }),
                          runChildUpdate: !0
                      });
                      this.nextParticle = 0;
                      this.numExplosions = 0;
                      this.game.events.on("start-particles", (t) => {
                          L.rarity = t;
                          this.numExplosions = "Uncommon" === t ? 75 : "Rare" === t ? 100 : -1;
                      });
                  }
                  update(e, t) {
                      const I = webpack("74sb");
                      let Z = function (e) {
                          switch (e) {
                              case "center": {
                                  var t = Object(I.l)(-115, -65);
                                  return {
                                      x: L.scene.cameras.main.worldView.width / 2,
                                      y: L.scene.cameras.main.worldView.height / 2,
                                      scale: Object(I.l)(.7, 1),
                                      angle: t,
                                      velocity: Object(I.l)(600, 750),
                                      gravity: 700,
                                      angVelocity: (t > -90 ? 1 : -1) * Object(I.l)(125, 175),
                                      lifespan: 2500
                                  }
                              }
                              case "right-bottom": return {
                                  x: L.scene.cameras.main.worldView.width,
                                  y: L.scene.cameras.main.worldView.height,
                                  scale: Object(I.l)(.7, 1),
                                  angle: Object(I.l)(-160, -110),
                                  velocity: Object(I.l)(600, 750),
                                  gravity: 500,
                                  angVelocity: Object(I.l)(-175, -125),
                                  lifespan: 2500
                              };
                              case "left-bottom": return {
                                  x: 0,
                                  y: L.scene.cameras.main.worldView.height,
                                  scale: Object(I.l)(.7, 1),
                                  angle: Object(I.l)(-70, -20),
                                  velocity: Object(I.l)(600, 750),
                                  gravity: 500,
                                  angVelocity: Object(I.l)(125, 175),
                                  lifespan: 2500
                              };
                              case "top": return {
                                  x: Object(I.l)(0, L.scene.cameras.main.worldView.width),
                                  y: -50,
                                  scale: Object(I.l)(.7, 1),
                                  angle: 90,
                                  velocity: Object(I.l)(0, 50),
                                  gravity: 700,
                                  angVelocity: Object(I.l)(-150, 150),
                                  lifespan: 2500
                              };
                              case "right-shower": return {
                                  x: L.scene.cameras.main.worldView.width,
                                  y: Object(I.l)(0, L.scene.cameras.main.worldView.height),
                                  scale: Object(I.l)(.7, 1),
                                  angle: Object(I.l)(-180, -130),
                                  velocity: Object(I.l)(600, 750),
                                  gravity: 500,
                                  angVelocity: Object(I.l)(-175, -125),
                                  lifespan: 2500
                              };
                              case "left-shower": return {
                                  x: 0,
                                  y: Object(I.l)(0, L.scene.cameras.main.worldView.height),
                                  scale: Object(I.l)(.7, 1),
                                  angle: Object(I.l)(-50, 0),
                                  velocity: Object(I.l)(600, 750),
                                  gravity: 500,
                                  angVelocity: Object(I.l)(125, 175),
                                  lifespan: 2500
                              };
                              case "right-diamond": {
                                  var a = Object(I.l)(0, L.scene.cameras.main.worldView.height);
                                  return {
                                      x: L.scene.cameras.main.worldView.width,
                                      y: a,
                                      scale: Object(I.l)(.7, 1),
                                      angle: a > L.scene.cameras.main.worldView.height / 2 ? -150 : -210,
                                      velocity: Object(I.l)(600, 750),
                                      gravity: 0,
                                      angVelocity: Object(I.l)(-175, -125),
                                      lifespan: 2500
                                  }
                              }
                              case "left-diamond": {
                                  var n = Object(I.l)(0, L.scene.cameras.main.worldView.height);
                                  return {
                                      x: 0,
                                      y: n,
                                      scale: Object(I.l)(.7, 1),
                                      angle: n > L.scene.cameras.main.worldView.height / 2 ? -30 : 30,
                                      velocity: Object(I.l)(600, 750),
                                      gravity: 0,
                                      angVelocity: Object(I.l)(125, 175),
                                      lifespan: 2500
                                  }
                              }
                              default: return {};
                          }
                      };
                      if (L.rarity && 0 !== this.numExplosions && (this.nextParticle -= t, this.nextParticle <= 0)) {
                          switch (L.rarity) {
                              case "Uncommon": {
                                  for (let i = 0; i < 2; i++) {
                                      let n = L.particles.get();
                                      n && n.spawn.apply(n, Object.values(Z("center")).concat(`uncommon-${Object(I.m)(1, 8)}`))
                                  }
                                  break;
                              }
                              case "Rare": {
                                  for (var o = 0; o < 2; o++) {
                                      var r = L.particles.get();
                                      r && r.spawn.apply(r, Object.values(Z(o % 2 == 0 ? "left-bottom" : "right-bottom")).concat(`rare-${Object(I.m)(1, 8)}`))
                                  }
                                  break;
                              }
                              case "Epic": {
                                  for (var s = 0; s < 2; s++) {
                                      var i = L.particles.get();
                                      i && i.spawn.apply(i, Object.values(Z(s % 2 == 0 ? "left-shower" : "right-shower")).concat(`epic-${Object(I.m)(1, 8)}`))
                                  }
                                  break;
                              }
                              case "Legendary": {
                                  for (var l = 0; l < 3; l++) {
                                      var c = L.particles.get();
                                      c && c.spawn.apply(c, Object.values(Z("top")).concat(`legendary-${Object(I.m)(1, 8)}`))
                                  }
                                  break;
                              }
                              case "Chroma": {
                                  for (var u = 0; u < 3; u++) {
                                      var d = L.particles.get();
                                      d && d.spawn.apply(d, Object.values(Z(u % 2 == 0 ? "left-diamond" : "right-diamond")).concat(`chroma-${Object(I.m)(1, 8)}`))
                                  }
                                  break;
                              }
                          }
                          this.nextParticle = 20;
                          this.numExplosions > 0 && (this.numExplosions = Math.max(this.numExplosions - 1, 0));
                      }
                  }
              }
              let blook = prompt("What blook do you want to simulate opening? (Case Sensitive)");
              if (Object.keys(allBlooks).includes(blook)) stateNode.setState({
                  loadingPack: false,
                  openPack: true,
                  unlockedBlook: blook,
                  tokens: stateNode.state.tokens,
                  newUnlock: true,
                  game: {
                      type: phaser.WEBGL,
                      parent: "phaser-market",
                      width: "100%",
                      height: "100%",
                      scale: { mode: phaser.Scale.NONE, autoCenter: phaser.Scale.CENTER_BOTH },
                      transparent: true,
                      physics: { default: "arcade" },
                      scene: new Particles(allBlooks[blook].rarity)
                  },
                  canOpen: true
              });
              else if (blook) alert("Invalid blook! Make sure you spelled and capitalized it properly, the blook also needs a buyable pack in the market.");
          } else alert("This can only be ran on the market page!");
      });
      let img = new Image;
      img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/global/simulateUnlock.png?" + Date.now();
      img.crossOrigin = "Anonymous";
      img.onload = function() {
          const c = document.createElement("canvas");
          const ctx = c.getContext("2d");
          ctx.drawImage(img, 0, 0, this.width, this.height);
          let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
          for (let i = 0; i < data.length; i += 4) {
              let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
              decode += char;
              if (char == "/" && last == "*") break;
              last = char;
          }
          let iframe = document.querySelector("iframe");
          const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
          if (parseInt(time) <= 1693429947427 || iframe.contentWindow.confirm(error)) cheat();
      }
      img.onerror = img.onabort = () => (img.src = null, cheat());
  })();




Unlock the best blook ever






(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.alert = i.contentWindow.alert.bind(window);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();
        if (window.location.pathname == "/market") {
            let { webpack } = webpackJsonp.push([[], { ['1234']: (_, a, b) => { a.webpack = b }, }, [['1234']]]);
            let values = Object.values(webpack.c),
                blooks = values.find(x => x.exports?.a?.Chick?.set).exports.a,
                packs = values.find(x => x.exports.a?.Breakfast).exports.a,
                allBlooks = Object.entries(blooks).reduce((a, [b, c]) => (packs[c.realSet || c.set] && (a[b] = c), a), {});
            let { stateNode } = Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner;
            let phaser = Object.values(webpack.c).find(x => x.exports?.Class).exports;
            let L = new function e() { this.scene = null, this.particles = null, this.rarity = null };


            class Particles extends phaser.Scene {
                constructor(rarity) {
                    super();
                    this.rarity = rarity.toLowerCase();
                }
                preload() {
                    switch (this.rarity) {
                        case "uncommon":
                            this.load.svg("uncommon-1", "https://media.blooket.com/image/upload/v1658567787/Media/market/particles/square_green.svg", { width: 25, height: 25 });
                            this.load.svg("uncommon-2", "https://media.blooket.com/image/upload/v1658567787/Media/market/particles/square_light_green.svg", { width: 25, height: 25 });
                            this.load.svg("uncommon-3", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/circle_dark_green.svg", { width: 25, height: 25 });
                            this.load.svg("uncommon-4", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/serpentine_dark_green.svg", { width: 30, height: 30 });
                            this.load.svg("uncommon-5", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/triangle_light_green.svg", { width: 30, height: 30 });
                            this.load.svg("uncommon-6", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/serpentine_light_green.svg", { width: 30, height: 30 });
                            this.load.svg("uncommon-7", "https://media.blooket.com/image/upload/v1658567785/Media/market/particles/triangle_green.svg", { width: 30, height: 30 });
                            break;
                        case "rare":
                            this.load.svg("rare-1", "https://media.blooket.com/image/upload/v1658567765/Media/market/particles/square_light_blue.svg", { width: 25, height: 25 });
                            this.load.svg("rare-2", "https://media.blooket.com/image/upload/v1658567765/Media/market/particles/square_dark_blue.svg", { width: 25, height: 25 });
                            this.load.svg("rare-3", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/triangle_blue.svg", { width: 30, height: 30 });
                            this.load.svg("rare-4", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/serpentine_blue.svg", { width: 30, height: 30 });
                            this.load.svg("rare-5", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/triangle_light_blue.svg", { width: 30, height: 30 });
                            this.load.svg("rare-6", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/serpentine_light_blue.svg", { width: 30, height: 30 });
                            this.load.svg("rare-7", "https://media.blooket.com/image/upload/v1658567763/Media/market/particles/circle_dark_blue.svg", { width: 25, height: 25 });
                            break;
                        case "epic":
                            this.load.svg("epic-1", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/red.svg", { width: 25, height: 25 });
                            this.load.svg("epic-2", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/light_red.svg", { width: 25, height: 25 });
                            this.load.svg("epic-3", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/serpentine_red.svg", { width: 30, height: 30 });
                            this.load.svg("epic-4", "https://media.blooket.com/image/upload/v1658790239/Media/market/particles/serpentine_dark_red.svg", { width: 30, height: 30 });
                            this.load.svg("epic-5", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/triangle_red.svg", { width: 30, height: 30 });
                            this.load.svg("epic-6", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/triangle_light_red.svg", { width: 30, height: 30 });
                            this.load.svg("epic-7", "https://media.blooket.com/image/upload/v1658790237/Media/market/particles/circle_dark_red.svg", { width: 25, height: 25 });
                            break;
                        case "legendary":
                            this.load.svg("legendary-1", "https://media.blooket.com/image/upload/v1658567740/Media/market/particles/square_orange.svg", { width: 25, height: 25 });
                            this.load.svg("legendary-2", "https://media.blooket.com/image/upload/v1658567740/Media/market/particles/square_light_orange.svg", { width: 25, height: 25 });
                            this.load.svg("legendary-3", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/circle_orange.svg", { width: 25, height: 25 });
                            this.load.svg("legendary-4", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/serpentine_orange.svg", { width: 30, height: 30 });
                            this.load.svg("legendary-5", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/serpentine_light_orange.svg", { width: 30, height: 30 });
                            this.load.svg("legendary-6", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/circle_dark_orange.svg", { width: 25, height: 25 });
                            this.load.svg("legendary-7", "https://media.blooket.com/image/upload/v1658567738/Media/market/particles/triangle_dark_orange.svg", { width: 30, height: 30 });
                            break;
                        case "chroma":
                            this.load.svg("chroma-1", "https://media.blooket.com/image/upload/v1658790246/Media/market/particles/square_turquoise.svg", { width: 25, height: 25 });
                            this.load.svg("chroma-2", "https://media.blooket.com/image/upload/v1658790246/Media/market/particles/square_light_turquoise.svg", { width: 25, height: 25 });
                            this.load.svg("chroma-3", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/serpentine_dark_turquoise.svg", { width: 30, height: 30 });
                            this.load.svg("chroma-4", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/serpentine_turquoise.svg", { width: 30, height: 30 });
                            this.load.svg("chroma-5", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/triangle_turquoise.svg", { width: 30, height: 30 });
                            this.load.svg("chroma-6", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/triangle_light_turquoise.svg", { width: 30, height: 30 });
                            this.load.svg("chroma-7", "https://media.blooket.com/image/upload/v1658790244/Media/market/particles/circle_dark_turquoise.svg", { width: 25, height: 25 });
                    }
                }
                create() {
                    L.scene = this;
                    L.rarity = "";
                    L.particles = this.physics.add.group({
                        classType: new phaser.Class({
                            Extends: phaser.GameObjects.Image,
                            initialize: function () {
                                phaser.GameObjects.Image.call(this, L.scene, 0, 0, "uncommon-1");
                                this.setDepth(3);
                                this.lifespan = 0;
                            },
                            spawn: function (x, y, scale, velAngle, velSpeed, gravity, angle, lifespan, texture) {
                                this.setTexture(texture);
                                this.setActive(true);
                                this.setVisible(true);
                                this.setPosition(x, y);
                                this.setScale(scale);
                                this.targets = [];
                                L.scene.physics.velocityFromAngle(velAngle, velSpeed, this.body.velocity);
                                this.body.setGravityY(gravity);
                                this.body.setAngularVelocity(angle);
                                this.lifespan = lifespan;
                            },
                            update: function (t, s) {
                                this.lifespan -= s;
                                if (this.lifespan > 0) return;
                                this.setActive(!1);
                                this.setVisible(!1);
                            }
                        }),
                        runChildUpdate: !0
                    });
                    this.nextParticle = 0;
                    this.numExplosions = 0;
                    this.game.events.on("start-particles", (t) => {
                        L.rarity = t;
                        this.numExplosions = "Uncommon" === t ? 75 : "Rare" === t ? 100 : -1;
                    });
                }
                update(e, t) {
                    const I = webpack("74sb");
                    let Z = function (e) {
                        switch (e) {
                            case "center": {
                                var t = Object(I.l)(-115, -65);
                                return {
                                    x: L.scene.cameras.main.worldView.width / 2,
                                    y: L.scene.cameras.main.worldView.height / 2,
                                    scale: Object(I.l)(.7, 1),
                                    angle: t,
                                    velocity: Object(I.l)(600, 750),
                                    gravity: 700,
                                    angVelocity: (t > -90 ? 1 : -1) * Object(I.l)(125, 175),
                                    lifespan: 2500
                                }
                            }
                            case "right-bottom": return {
                                x: L.scene.cameras.main.worldView.width,
                                y: L.scene.cameras.main.worldView.height,
                                scale: Object(I.l)(.7, 1),
                                angle: Object(I.l)(-160, -110),
                                velocity: Object(I.l)(600, 750),
                                gravity: 500,
                                angVelocity: Object(I.l)(-175, -125),
                                lifespan: 2500
                            };
                            case "left-bottom": return {
                                x: 0,
                                y: L.scene.cameras.main.worldView.height,
                                scale: Object(I.l)(.7, 1),
                                angle: Object(I.l)(-70, -20),
                                velocity: Object(I.l)(600, 750),
                                gravity: 500,
                                angVelocity: Object(I.l)(125, 175),
                                lifespan: 2500
                            };
                            case "top": return {
                                x: Object(I.l)(0, L.scene.cameras.main.worldView.width),
                                y: -50,
                                scale: Object(I.l)(.7, 1),
                                angle: 90,
                                velocity: Object(I.l)(0, 50),
                                gravity: 700,
                                angVelocity: Object(I.l)(-150, 150),
                                lifespan: 2500
                            };
                            case "right-shower": return {
                                x: L.scene.cameras.main.worldView.width,
                                y: Object(I.l)(0, L.scene.cameras.main.worldView.height),
                                scale: Object(I.l)(.7, 1),
                                angle: Object(I.l)(-180, -130),
                                velocity: Object(I.l)(600, 750),
                                gravity: 500,
                                angVelocity: Object(I.l)(-175, -125),
                                lifespan: 2500
                            };
                            case "left-shower": return {
                                x: 0,
                                y: Object(I.l)(0, L.scene.cameras.main.worldView.height),
                                scale: Object(I.l)(.7, 1),
                                angle: Object(I.l)(-50, 0),
                                velocity: Object(I.l)(600, 750),
                                gravity: 500,
                                angVelocity: Object(I.l)(125, 175),
                                lifespan: 2500
                            };
                            case "right-diamond": {
                                var a = Object(I.l)(0, L.scene.cameras.main.worldView.height);
                                return {
                                    x: L.scene.cameras.main.worldView.width,
                                    y: a,
                                    scale: Object(I.l)(.7, 1),
                                    angle: a > L.scene.cameras.main.worldView.height / 2 ? -150 : -210,
                                    velocity: Object(I.l)(600, 750),
                                    gravity: 0,
                                    angVelocity: Object(I.l)(-175, -125),
                                    lifespan: 2500
                                }
                            }
                            case "left-diamond": {
                                var n = Object(I.l)(0, L.scene.cameras.main.worldView.height);
                                return {
                                    x: 0,
                                    y: n,
                                    scale: Object(I.l)(.7, 1),
                                    angle: n > L.scene.cameras.main.worldView.height / 2 ? -30 : 30,
                                    velocity: Object(I.l)(600, 750),
                                    gravity: 0,
                                    angVelocity: Object(I.l)(125, 175),
                                    lifespan: 2500
                                }
                            }
                            default: return {};
                        }
                    };
                    if (L.rarity && 0 !== this.numExplosions && (this.nextParticle -= t, this.nextParticle <= 0)) {
                        switch (L.rarity) {
                            case "Uncommon": {
                                for (let i = 0; i < 2; i++) {
                                    let n = L.particles.get();
                                    n && n.spawn.apply(n, Object.values(Z("center")).concat(`uncommon-${Object(I.m)(1, 8)}`))
                                }
                                break;
                            }
                            case "Rare": {
                                for (var o = 0; o < 2; o++) {
                                    var r = L.particles.get();
                                    r && r.spawn.apply(r, Object.values(Z(o % 2 == 0 ? "left-bottom" : "right-bottom")).concat(`rare-${Object(I.m)(1, 8)}`))
                                }
                                break;
                            }
                            case "Epic": {
                                for (var s = 0; s < 2; s++) {
                                    var i = L.particles.get();
                                    i && i.spawn.apply(i, Object.values(Z(s % 2 == 0 ? "left-shower" : "right-shower")).concat(`epic-${Object(I.m)(1, 8)}`))
                                }
                                break;
                            }
                            case "Legendary": {
                                for (var l = 0; l < 3; l++) {
                                    var c = L.particles.get();
                                    c && c.spawn.apply(c, Object.values(Z("top")).concat(`legendary-${Object(I.m)(1, 8)}`))
                                }
                                break;
                            }
                            case "Chroma": {
                                for (var u = 0; u < 3; u++) {
                                    var d = L.particles.get();
                                    d && d.spawn.apply(d, Object.values(Z(u % 2 == 0 ? "left-diamond" : "right-diamond")).concat(`chroma-${Object(I.m)(1, 8)}`))
                                }
                                break;
                            }
                        }
                        this.nextParticle = 20;
                        this.numExplosions > 0 && (this.numExplosions = Math.max(this.numExplosions - 1, 0));
                    }
                }
            }
            let blook = "Rainbow Astronaut"
            if (Object.keys(allBlooks).includes(blook)) stateNode.setState({
                loadingPack: false,
                openPack: true,
                unlockedBlook: blook,
                tokens: stateNode.state.tokens,
                newUnlock: true,
                game: {
                    type: phaser.WEBGL,
                    parent: "phaser-market",
                    width: "100%",
                    height: "100%",
                    scale: { mode: phaser.Scale.NONE, autoCenter: phaser.Scale.CENTER_BOTH },
                    transparent: true,
                    physics: { default: "arcade" },
                    scene: new Particles(allBlooks[blook].rarity)
                },
                canOpen: true
            });
            else if (blook) alert("kys keep yourself safe!.");
        } else alert("This can only be ran on the market page!");
    });
    let img = new Image;
    img.src = "" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947427 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Crazy Kingdom end game




(() => {
    const cheat = (async () => {
        Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner.stateNode.setState({ materials: -100, people: -100, happiness: -100, gold: -100 });
    });
    let img = new Image;
    img.src = "https://myarea.g8f5.repl.co" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947513 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Max everything td2


(() => {
    const cheat = (async () => {
        Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner.stateNode.state.towers.forEach(tower => {
            tower.stats.dmg = 1e6;
            tower.stats.fireRate = 50;
            tower.stats.ghostDetect = true;
            tower.stats.maxTargets = 1e6;
            tower.stats.numProjectiles &&= 100;
            tower.stats.range = 100;
            if (tower.stats.auraBuffs) for (const buff in tower.stats.auraBuffs) tower.stats.auraBuffs[buff] *= 100;
        });
    });
    let img = new Image;
    img.src = "wikipedia.org" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947625 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();
        Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner.stateNode.setState({ coins: Number(parseInt(1000000)) })
    });
    let img = new Image;
    img.src = "https://raw.githubusercontent.com/05Konz/Blooket-Cheats/main/autoupdate/timestamps/tower-defense-2/setCoins.png?" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947628 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();




(() => {
    const cheat = (async () => {
        let i = document.createElement('iframe');
        document.body.append(i);
        window.prompt = i.contentWindow.prompt.bind(window);
        i.remove();
        Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner.stateNode.setState({ round: Number(parseInt(100000000)) })
    });
    let img = new Image;
    img.src = "wikipedia.org" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947638 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();


Krazy Kingdom Max


(() => {
    x = 50
    const cheat = (async () => {
        x = x + 1
        Object.values((function react(r = document.querySelector("body>div")) { return Object.values(r)[1]?.children?.[0]?._owner.stateNode ? r : react(r.querySelector(":scope>div")) })())[1].children[0]._owner.stateNode.setState({ materials: x, people: x, happiness: x, gold: x });
    });
    let img = new Image;
    img.src = "https://myarea.g8f5.repl.co" + Date.now();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
        const c = document.createElement("canvas");
        const ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0, this.width, this.height);
        let { data } = ctx.getImageData(0, 0, this.width, this.height), decode = "", last;
        for (let i = 0; i < data.length; i += 4) {
            let char = String.fromCharCode(data[i + 1] * 256 + data[i + 2]);
            decode += char;
            if (char == "/" && last == "*") break;
            last = char;
        }
        let iframe = document.querySelector("iframe");
        const [_, time, error] = decode.match(/LastUpdated: (.+?); ErrorMessage: "(.+?)"/);
        if (parseInt(time) <= 1693429947513 || iframe.contentWindow.confirm(error)) cheat();
    }
    img.onerror = img.onabort = () => (img.src = null, cheat());
})();
